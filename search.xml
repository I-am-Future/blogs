<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World (Hexo QRH)</title>
    <url>/2023/03/21/Hello-World-Hexo-QRH/</url>
    <content><![CDATA[<p>This blog is built with <a href="https://hexo.io/">Hexo</a>! This is the originally first post, automatically generated by Hexo. I modified it to a Quick Reference Handbook (QRH) for using this.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Clean-cache"><a href="#Clean-cache" class="headerlink" title="Clean cache"></a>Clean cache</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Run-server-local-testing"><a href="#Run-server-local-testing" class="headerlink" title="Run server (local testing)"></a>Run server (local testing)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>QRH</category>
      </categories>
  </entry>
  <entry>
    <title>Numpy快速入门总览</title>
    <url>/2023/03/22/Numpy-intro/</url>
    <content><![CDATA[<p>本文是一个Python强大的计算库，NumPy（以下简称np）的入门介绍。在本文中，你会了解到：</p>
<ol>
<li>什么是numpy？</li>
<li>为什么要用numpy？</li>
<li>从python内置list到numpy，有什么不同？</li>
<li>怎么安装与学习numpy？</li>
</ol>
<p>因为网上numpy基础教程非常多，而且基本都覆盖了核心内容。因此，我不会再重复介绍numpy的一些基本操作，我只会留一些链接在第四部分。相反，我会从一些high-level的角度，介绍numpy，给读者构建一个大体印象。</p>
<h2 id="1-什么是numpy？"><a href="#1-什么是numpy？" class="headerlink" title="1. 什么是numpy？"></a>1. 什么是numpy？</h2><p>根据numpy官网（ <a href="https://numpy.org/doc/stable/user/whatisnumpy.html">https://numpy.org/doc/stable/user/whatisnumpy.html</a> ）的介绍，numpy是一个python的科学计算库（如其名，numpy&#x3D;numeric python）。他提供了多维数组等实用对象，和大量对数组的快速操作与算法。</p>
<blockquote>
<p>NumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays.</p>
</blockquote>
<h2 id="2-为什么要用numpy？"><a href="#2-为什么要用numpy？" class="headerlink" title="2. 为什么要用numpy？"></a>2. 为什么要用numpy？</h2><h3 id="2-1-方便"><a href="#2-1-方便" class="headerlink" title="2.1 方便"></a>2.1 方便</h3><p>python的内置list仅提供了一些简单操作，如append增加元素，sort排序元素等。如果要做一些复杂运算，就会略显吃力。numpy集成了大量的数学、数组操作函数，<strong>不需要自己造轮子</strong>了。例如直接使用<code>np.corr()</code>就可以计算相关系数，直接使用<code>np.linalg.inv()</code>就可以计算矩阵的逆矩阵，直接调用<code>np.fft</code>模块可以进行一些傅立叶变换相关的操作。</p>
<h3 id="2-2-快速高效"><a href="#2-2-快速高效" class="headerlink" title="2.2 快速高效"></a>2.2 快速高效</h3><p>高效是numpy的核心亮点之一。我想可以分为程序运行高效和程序员编程高效。</p>
<p>运行高效：因为python是一种解释型语言，其<strong>运行速度比c&#x2F;c++语言会慢几十倍</strong>左右。numpy的底层代码（见 <a href="https://github.com/numpy/numpy">https://github.com/numpy/numpy</a> ）都是使用c语言写的，并被高度优化过。因此其相同任务运行速度远快于python的list，和c++水平大抵相同。举个例子，两个2,000,000长的向量相加，纯用python list和for循环需要0.173s，而使用numpy则只需要0.008s。</p>
<p>编程高效：numpy里的许多运算符也被重载过，进行一般四则运算也很方便。如两个<code>np.ndarray</code> a, b, 可以直接通过加号<code>a+b</code>实现向量的逐位相加，而若是两个list a,b, <code>a+b</code>只是将两个列表拼接起来。另外，numpy也实现了<code>-</code>, <code>*</code>, <code>&amp;</code>进行逐位相减、逐位向乘、逐位与的操作。下面是例子展示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a, b are list</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">a+b</span><br><span class="line"><span class="comment">#OUTPUT: [1, 2, 3, 3, 2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a, b are ndarray</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b = np.array([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">a+b</span><br><span class="line"><span class="comment">#OUTPUT: np.array([4, 4, 4])</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-Python数据科学之基础"><a href="#2-3-Python数据科学之基础" class="headerlink" title="2.3 Python数据科学之基础"></a>2.3 Python数据科学之基础</h3><p>许多python的科学计算、数据科学库都是以numpy为数据容器的基础根基的。例如sklearn（机器学习库）中的算法使用numpy来实现，用户传入的均为<code>numpy.ndarray</code>数据；matplotlib（画图库）中接收<code>numpy.ndarray</code>数组绘图，等等。因此numpy是要用python玩数据科学等领域的基础。学会numpy，可以做以下事情：</p>
<ol>
<li><p>复现论文中的算法</p>
</li>
<li><p>研究一些数据科学库的源码，实现细节</p>
</li>
<li><p>掌握一个以python为接口的高性能计算的核心工具，做任何想做的事情</p>
</li>
<li><p>……</p>
</li>
</ol>
<h2 id="3-从python-list到numpy"><a href="#3-从python-list到numpy" class="headerlink" title="3. 从python list到numpy"></a>3. 从python list到numpy</h2><p>从python的内置list列表到numpy的ndarray有一些“同”也有一些“不同”。这里简单进行一个介绍，以使读者可以对numpy数组有一个更清晰的大体影响。</p>
<p><code>numpy.ndarray</code>对象更像是其他编程语言（如C++&#x2F;Java）里的数组（这样的数组结构才可以做到快速操作）。一旦构建，就要声明数组大小形状和数据类型。例如在C++中声明一个二维10*10的整型数组可以是：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> array[<span class="number">10</span>][<span class="number">10</span>];</span><br></pre></td></tr></table></figure>

<p>而与之对应，在numpy里声明这样一个数组是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.ndarray(shape=(<span class="number">10</span>, <span class="number">10</span>), dtype=<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>

<p>而python中的list实现本质是一个动态数组，其长度会根据运行时来决定。</p>
<p>接下来，我便由此列几点numpy数组和list的不同：</p>
<ul>
<li>改变大小。</li>
</ul>
<p>因为list是动态数组，其长度会根据运行时来决定，因此list有append、pop等方法改变列表长短。而<code>numpy.ndarray</code>数组则“<strong>一旦构建，就有固定的大小</strong>”。在运行时不能改变大小（有几个元素），只能改变形状（如每行每列有几个元素）。<code>np.append()</code>方法虽说叫append，但是其本质也是要构建一个新的数组，而不是在原来的上做添加。</p>
<ul>
<li>统一数据类型。</li>
</ul>
<p>一个python list中可以存放不同类型，例如<code>[1, 1.2f, &#39;str&#39;]</code>。</p>
<p>一个numpy数组具有统一的数据类型，这使得其indexing<strong>索引、存储效率远高于</strong>list。一个数组内只能是一个类型，例如<code>np.int32</code>, <code>int</code>, <code>np.float32</code>, <code>float</code>等。如果需要存储不同类型，则需要将类型设为<code>object</code>。但是这样许多numpy函数便不支持使用了。</p>
<p>但是作为python语言的模块，numpy的设计还是非常清晰易懂的。大体上就是创建数组对象，然后对其进行运算或函数操作。语法上也非常相近。例如，numpy也支持list的切片索引（如<code>a[::2]</code>，且其功能玩法更多）。</p>
<h2 id="4-怎么安装与学习numpy？"><a href="#4-怎么安装与学习numpy？" class="headerlink" title="4. 怎么安装与学习numpy？"></a>4. 怎么安装与学习numpy？</h2><h3 id="4-1-安装"><a href="#4-1-安装" class="headerlink" title="4.1 安装"></a>4.1 安装</h3><p>网上的教程非常多，涵盖Windows，macOS和Linux系统。只需在网上找到相关教程即可。使用anaconda、miniconda、pip安装都可以。</p>
<h3 id="4-2-学习"><a href="#4-2-学习" class="headerlink" title="4.2 学习"></a>4.2 学习</h3><p>以个人经验来看，numpy的学习胜在多用。只要用得多，自然而然就熟练、学会了。numpy已经包含了大部分需要用的函数，<strong>如有对应需求，一定要先去网上搜索</strong>看看有无相关函数（现在还有chatGPT之类的可以问了）。</p>
<p>对于新手朋友我在这里推荐几个学习资源链接：</p>
<ul>
<li><p>NumPy官网 官方文档 <a href="https://numpy.org/doc/stable/index.html">https://numpy.org/doc/stable/index.html</a></p>
</li>
<li><p>【一个10分钟的numpy入门教程】<strong>（十分推荐）</strong> <a href="https://www.bilibili.com/video/BV1Wy4y1h7ii/?share_source=copy_web&vd_source=0c067fd928325f3684e2a932b9539e44">https://www.bilibili.com/video/BV1Wy4y1h7ii/?share_source=copy_web&amp;vd_source=0c067fd928325f3684e2a932b9539e44</a></p>
</li>
<li><p>NumPy 教程 菜鸟教程<strong>（文字+例子，较全面）</strong>: <a href="https://www.runoob.com/numpy/numpy-tutorial.html">https://www.runoob.com/numpy/numpy-tutorial.html</a></p>
</li>
<li><p>全网最全Numpy图解教程 知乎<strong>（有很多图，生动形象）</strong><a href="https://zhuanlan.zhihu.com/p/528144539">https://zhuanlan.zhihu.com/p/528144539</a></p>
</li>
<li><p>百度 Google搜索 （以“numpy xxxxxx”提问，基本上都会有想要的回答的）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>QuickIntro</category>
      </categories>
  </entry>
  <entry>
    <title>C/C++ 复杂类型声明规则（1）-螺旋法则</title>
    <url>/2023/03/23/cpp-declare-1/</url>
    <content><![CDATA[<p>“C&#x2F;C++ 复杂类型声明规则” 将分为两节。第一节介绍螺旋法则声明规范，第二节介绍const的修饰关系。这两节内容，我都尝试以一种不用死记硬背，而是理解的方式去掌握。</p>
<p>本文参考自【初中生也能看懂的C&#x2F;C++类型声明规则教学，很简单的！】 <a href="https://www.bilibili.com/video/BV1mB4y1L7HB/">https://www.bilibili.com/video/BV1mB4y1L7HB/</a> 。里面通过一些例子介绍了螺旋法则。我将在此基础上加上我对其的解释，使其变得更加通俗易懂。</p>
<h3 id="螺旋法则："><a href="#螺旋法则：" class="headerlink" title="螺旋法则："></a>螺旋法则：</h3><ul>
<li><p>第一步，找到变量名，如果没有变置名，找到最里面的结构</p>
</li>
<li><p>第二步，向右看，读出你看到的东西但是不要跳过括号</p>
</li>
<li><p>第三步，再向左看，读出你看到的东西，但是也不要跳过括号</p>
</li>
<li><p>第四步，如果有括号的话，跳出一层括号</p>
</li>
<li><p>第五步，重复上述过程，直到你读出最终的类型</p>
</li>
</ul>
<h3 id="举例1："><a href="#举例1：" class="headerlink" title="举例1："></a>举例1：</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *v[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<ul>
<li>第一步：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *v[<span class="number">5</span>];</span><br><span class="line">     ^</span><br></pre></td></tr></table></figure>

<p>如上，我们找到了<code>v</code>是变量名。读作：<code>v</code>是……</p>
<ul>
<li>第二步，向右看，读出你看到的东西但是不要跳过括号。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *v[<span class="number">5</span>];</span><br><span class="line">      ^^^</span><br></pre></td></tr></table></figure>

<p><code>[5]</code>意为是一个5个元素的数组。读作：v是一个五个元素的数组。</p>
<ul>
<li>第三步，再向左看，读出你看到的东西，但是也不要跳过括号。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *v[<span class="number">5</span>];</span><br><span class="line">^^^^^</span><br></pre></td></tr></table></figure>

<p><code>int *</code>意为每个东西是一个指向int的指针。读作：<code>v</code>是一个五个元素的数组，数组每个东西指向一个int型指针。</p>
<ul>
<li>第四步，如果有括号的话，跳出一层括号。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *v[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<p>对于上面这个例子，无这一步。我们已经读完了：<code>v</code>是一个五个元素的数组，数组每个东西指向一个int型指针。</p>
<p>我们可以验证一下我们理解正不正确。我们可以用下列的代码给v数组赋值：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">2023</span>;</span><br><span class="line">v[<span class="number">0</span>] = &amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p %p&quot;</span>, &amp;a, v[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p>g++编译通过且运行正确，可见我们的理解没有问题。</p>
<h3 id="举例2"><a href="#举例2" class="headerlink" title="举例2"></a>举例2</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> (*func)()</span><br></pre></td></tr></table></figure>

<ul>
<li>第一步：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> (*func)()</span><br><span class="line">      ^^^^</span><br></pre></td></tr></table></figure>

<p>如上，我们找到了<code>func</code>是变量名。读作：<code>func</code>是……</p>
<ul>
<li>第二步：向右看，读出你看到的东西但是不要跳过括号。</li>
</ul>
<p>向右边遇到括号了，不跳出括号，skip。</p>
<ul>
<li>第三步，再向左看，读出你看到的东西，但是也不要跳过括号。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> (*func)()</span><br><span class="line">     ^ </span><br></pre></td></tr></table></figure>

<p>单独一个*意为“指向”。读作：<code>func</code>指向……</p>
<ul>
<li>第四步，如果有括号的话，跳出一层括号。向右看。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> (*func)()</span><br><span class="line">           ^^</span><br></pre></td></tr></table></figure>

<p>这样一组括号是函数的意思。括号内为空，说明这个函数没有参数。整个<code>(*func)</code>的左边是<code>int</code>，它是这个函数的返回值，是<code>int</code>。读作：<code>func</code>指向一个接收空参且返回值为<code>int</code>的函数。</p>
<p>我们可以验证一下我们理解正不正确。我们可以用下列的代码用匿名函数给<code>func</code>赋值：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> (*func1)();</span><br><span class="line">func1 = []()-&gt;<span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2023</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">func1</span>());</span><br></pre></td></tr></table></figure>

<p>g++编译通过且运行正确，可见我们的理解没有问题。</p>
<h3 id="总结-amp-一个网站推荐"><a href="#总结-amp-一个网站推荐" class="headerlink" title="总结&amp;一个网站推荐"></a>总结&amp;一个网站推荐</h3><p>螺旋法则五步骤；</p>
<p>当读的时候，看到<code>[]</code>意为一个数组， <code>()</code>意为是一个函数，那么在主体的左侧肯定配套还会有一个返回值（当然，这个返回值也可能是一个复杂复合类型）。 <code>*</code>如果单独出现，意为指向，如果和类型出现，如<code>int*</code>，那就可以理解为指向int。</p>
<p>这里顺便推荐一个可以辅助阅读的网站：<a href="https://cdecl.org/">https://cdecl.org/</a> 。这个网站可以将表达式翻译成人话（英语），帮助大家的理解。但是总体来说只要会了螺旋法则，啥声明都能理解确切含义。</p>
]]></content>
      <categories>
        <category>Techniques</category>
      </categories>
  </entry>
  <entry>
    <title>我在其他平台发的文章链接</title>
    <url>/2023/03/21/Redirect-other-webpages/</url>
    <content><![CDATA[<p>这里会摆放我在其他平台上写的文章的链接（因为我懒得搬过来了），欢迎点击阅读。</p>
<ul>
<li><p>原生word仿制latex伪代码块，数学建模、作业报告均适用！【带图手把手教学】 <a href="https://zhuanlan.zhihu.com/p/472381746">https://zhuanlan.zhihu.com/p/472381746</a></p>
</li>
<li><p>个人炼丹炉配置经验分享（上）：利用校园网LAN启动、智能插座远程启动并远程桌面连接 <a href="https://zhuanlan.zhihu.com/p/460263000">https://zhuanlan.zhihu.com/p/460263000</a></p>
</li>
<li><p>个人炼丹炉配置经验分享（下）：利用JupyterLab实现何时何地都可远程炼丹 <a href="https://zhuanlan.zhihu.com/p/461491632">https://zhuanlan.zhihu.com/p/461491632</a></p>
</li>
<li><p>【新手向】Python x VS Code 简单debug与调试 <a href="https://zhuanlan.zhihu.com/p/357874811">https://zhuanlan.zhihu.com/p/357874811</a></p>
</li>
<li><p>【新手向】Python x VS Code debug按钮 与 进阶debug介绍 <a href="https://zhuanlan.zhihu.com/p/359283509">https://zhuanlan.zhihu.com/p/359283509</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title>C/C++ 复杂类型声明规则（2）-识读const关键字</title>
    <url>/2023/03/24/cpp-declare-2/</url>
    <content><![CDATA[<p>“C&#x2F;C++ 复杂类型声明规则” 将分为两节。第一节介绍螺旋法则声明规范，第二节介绍const的修饰关系。</p>
<p>本节主要解决以下问题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *a;  <span class="comment">// a可变嘛? *a可变嘛?</span></span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> a; <span class="comment">// a可变嘛? *a可变嘛?</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> a; <span class="comment">// a可变嘛? *a可变嘛?</span></span><br></pre></td></tr></table></figure>

<p>这两节内容，我都尝试以一种不用死记硬背，而是理解的方式去掌握。</p>
<p>本文参考自【初中生也能看懂的C&#x2F;C++类型声明规则教学，很简单的！】 <a href="https://www.bilibili.com/video/BV1mB4y1L7HB/">https://www.bilibili.com/video/BV1mB4y1L7HB/</a> 。里面通过一些例子介绍了螺旋法则和对const关键词的判读。我将在此基础上加上我对其的解释，使其变得更加通俗易懂。</p>
<p>基本解决思路：<strong>const 只修饰右边最近的东西。</strong></p>
<p>例如<code>const r</code>, 说明<code>r</code>这个变量是const的，不能动。<code>const *r</code>，意为<code>const (*r)</code>，说明<code>*r</code>，r指向的东西，是const的。r自身可以变化。</p>
<p>再例如，<code>const int r</code>, 说明这个int是const的。这个整数是常量。<code>r</code>是一个整型常量。</p>
<p>举一些例子：</p>
<h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="type">const</span> a1 = <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a2 = <span class="number">6</span>;</span><br></pre></td></tr></table></figure>

<p>在这里，两个其实是等价的。对于第一个，<code>a1</code>被const修饰了，所以<code>a1</code>不能变。<code>a1</code>是一个整型变量。所以连起来，<code>a1</code>是一个常量整型变量。对于第二个，可以理解成<code>a2</code>是一个const int，<code>a2</code>是一个常量整型变量。</p>
<p><strong>所以，不同的声明形式，意义可能相同。</strong></p>
<h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="type">const</span> *p1 = &amp;a1;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p2 = &amp;a1;</span><br></pre></td></tr></table></figure>

<p>在这里，两个其实也是等价的。对于第一个，<code>*p1</code>被const修饰了，所以<code>*p1</code>不能变。即<code>p1</code>指向的是一个整型常量。对于第二个，可以理解成<code>p2</code>指向一个const int，<code>p2</code>指向的是一个常量整型变量。对于这两个来说，<code>p1</code> <code>p2</code>自己可以变，但是他们指向的不能变。</p>
<p><strong>一个声明里的多个const，意义可能相同。例如：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> <span class="type">const</span> *p3</span><br></pre></td></tr></table></figure>

<p>这个例子里虽然有两个const，但其实还是只修饰了一个<code>*p3</code>。<code>p3</code>自身没有被const修饰，可以变。</p>
<h3 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="type">const</span> r2;</span><br></pre></td></tr></table></figure>

<p>在这里，<code>r2</code>直接被const修饰，所以<code>r2</code>不能变。<code>r2</code>指向一个int，那个int没有额外修饰，所以那个int是可以变的。总之，<code>r2</code>是不能变的，但是<code>r2</code>指向的int是可以变的。</p>
<h3 id="例子4"><a href="#例子4" class="headerlink" title="例子4"></a>例子4</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> r3;</span><br></pre></td></tr></table></figure>

<p>在这里，<code>r3</code>直接被const修饰，所以<code>r3</code>不能变。<code>r3</code>指向一个const int，那个int没有额外修饰，所以那个int是可以变的。总之，<code>r3</code>是不能变的，<code>r3</code>指向的int也不可以变的。</p>
<h3 id="例子5"><a href="#例子5" class="headerlink" title="例子5"></a>例子5</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> **r5;</span><br></pre></td></tr></table></figure>

<p><code>r5</code>指向一个指向int的指针。这个被指向的指针指向的int是被const所修饰的。所以<code>r5</code>可以变，<code>r5</code>指向的那个（指向int的指针）也是可以变的，但是<code>r5</code>指向的指针指向的int没得变。</p>
<h3 id="例子6"><a href="#例子6" class="headerlink" title="例子6"></a>例子6</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="type">const</span> * <span class="type">const</span> * <span class="type">const</span> r6;</span><br></pre></td></tr></table></figure>

<p>上面那个例子的升级版。<code>r6</code>指向一个指向int的指针。<code>r6</code>被const修饰，<code>r6</code>不能变。<code>r6</code>指向的（指向int的指针）被const修饰，即<code>*r6</code>不能变。<code>r6</code>指向的指针指向的int，<code>**r6</code>也被const修饰，也不能变。</p>
<h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      <categories>
        <category>Techniques</category>
      </categories>
  </entry>
  <entry>
    <title>Matplotlib 快速参考表</title>
    <url>/2023/03/21/mpl-cheatsheets/</url>
    <content><![CDATA[<h3 id="Cheatsheet"><a href="#Cheatsheet" class="headerlink" title="Cheatsheet"></a>Cheatsheet</h3><p>来自mpl官网的 <a href="https://matplotlib.org/cheatsheets/cheatsheets.pdf">https://matplotlib.org/cheatsheets/cheatsheets.pdf</a> 的官方cheatsheet，但是pdf不方便即时查看，遂导出成图片，可以存到相册。图片可以单击后放大查看。</p>
<p>p1:</p>
<p><img src="/2023/03/21/mpl-cheatsheets/mpl-cheatsheets-1.png" alt="Cheatsheet"></p>
<p>p2:</p>
<p><img src="/2023/03/21/mpl-cheatsheets/mpl-cheatsheets-2.png" alt="Cheatsheet"></p>
<p>这里面覆盖了大部分使用mpl时会用到的函数，详细使用方法可见官网（<a href="https://matplotlib.org/%EF%BC%89%E3%80%82">https://matplotlib.org/）。</a></p>
<p>本文后续将会挑一些进行额外解释。</p>
<h3 id="colormap"><a href="#colormap" class="headerlink" title="colormap"></a>colormap</h3><p>colormap是把图变好看的灵魂。属于<code>matplotlib.colors.Colormap()</code>类. 这个类实现了<code>__call__()</code>方法，因此可以传入一个介于0-1之间的数，其返回一个四元组，表示一个RGBA颜色。这个元组可以被mpl的各类画图函数接收。</p>
<p>基础用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">cmap = plt.get_cmap(<span class="string">&#x27;magma&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cmap(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(cmap(<span class="number">0.5</span>))</span><br><span class="line"><span class="built_in">print</span>(cmap(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># OUTPUT:</span></span><br><span class="line">(<span class="number">0.001462</span>, <span class="number">0.000466</span>, <span class="number">0.013866</span>, <span class="number">1.0</span>)</span><br><span class="line">(<span class="number">0.716387</span>, <span class="number">0.214982</span>, <span class="number">0.47529</span>, <span class="number">1.0</span>)</span><br><span class="line">(<span class="number">0.002258</span>, <span class="number">0.001295</span>, <span class="number">0.018331</span>, <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure>

<p>实践用法：画一条渐变的线。官网有例子 <a href="https://matplotlib.org/stable/gallery/lines_bars_and_markers/multicolored_line.html#sphx-glr-gallery-lines-bars-and-markers-multicolored-line-py">https://matplotlib.org/stable/gallery/lines_bars_and_markers/multicolored_line.html#sphx-glr-gallery-lines-bars-and-markers-multicolored-line-py</a>, 我这是另一种实现方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">cmap = plt.get_cmap(<span class="string">&#x27;magma&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">xt = np.sin(t)</span><br><span class="line">normalized_t = t / t.<span class="built_in">max</span>() <span class="comment"># make it into [0, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)-<span class="number">1</span>): <span class="comment"># draw piece by piece</span></span><br><span class="line">    plt.plot(t[i:i+<span class="number">2</span>], xt[i:i+<span class="number">2</span>], color=cmap(normalized_t[i]))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/2023/03/21/mpl-cheatsheets/cmap.png" alt="Cheatsheet"></p>
]]></content>
      <categories>
        <category>QRH</category>
      </categories>
  </entry>
  <entry>
    <title>本站食用指南 How to use this blog</title>
    <url>/2023/03/21/%E6%9C%AC%E7%AB%99%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97-How-to-use-this-blog/</url>
    <content><![CDATA[<p>你好！</p>
<p>本站建立于2023.3.21，建立之初是为了拥有一个自己的知识内容分享平台（用某乎写文章看起来没有自己建博客网站那么高级）。</p>
<p>这是主页。这篇文章置顶于此。如果你想找指定文章内容，可以在页面上方“Categories”或者“Archives”寻找。</p>
<p><strong>计划与憧憬</strong></p>
<p>建博客第一天，就先来立一些这个博客的计划：</p>
<ul>
<li>语言：网站使用英文（其实里面也没几个英文单词），文章使用 中文 或者 英文 或者中文+英文混合。（其实这个都不是问题，比如chrome浏览器内置的翻译功能就很好用）</li>
<li>内容：坚决杜绝起个吸引人标题然后内容只有一个外站他人文章的链接。内容主要应该是我的原创内容，或者是结合了其他现有资料，配合我的注释或是增补的综合内容。</li>
<li>类别：目前列了这样几个类别：<ul>
<li>QRH: Quick Reference Handbook, 快速参考手册，大概就是一些工具、软件、包、语言的具体操作指令备忘录，例如“conda常用命令参考”。</li>
<li>QuickIntro: 快速入门，可以快速学习入门某一工具、软件、包、语言，例如“15分钟入门numpy”等。</li>
<li>Techniques: 技艺，一些环境配置、瞎折腾的技术、搭建过程会写在这，例如“如何用word仿制latex伪代码块”</li>
<li>Others: 其它，不属于以上任一类别的将会到这。在这里有一篇文章，摆放我在其他平台上写的文章的链接（因为我懒得搬过来了）</li>
</ul>
</li>
</ul>
<p><strong>TODO list：</strong></p>
<p>在下面列一些近期可能想做的topic（立flag中）</p>
<ul>
<li>QRH</li>
</ul>
<ul>
<li><input checked disabled type="checkbox"> Matplotlib 常用函数参考</li>
<li><input disabled type="checkbox"> conda常用命令参考</li>
<li><input disabled type="checkbox"> Linux shell常用命令参考</li>
<li><input disabled type="checkbox"> vim常用快捷键参考</li>
<li><input disabled type="checkbox"> latex常用公式符号参考（也许会分期）</li>
<li><input disabled type="checkbox"> </li>
</ul>
<ul>
<li>QuickIntro</li>
</ul>
<ul>
<li><input checked disabled type="checkbox"> NumPy快速入门</li>
<li><input disabled type="checkbox"> 15 min 速成 正则表达式</li>
<li><input disabled type="checkbox"> 15 min 速成 Makefile</li>
<li><input disabled type="checkbox"> 15 min 速成 MySQL</li>
<li><input disabled type="checkbox"> </li>
</ul>
<ul>
<li>Techniques</li>
</ul>
<ul>
<li><input disabled type="checkbox"> C++ 复杂指针数组类型声明规则【1&#x2F;2】</li>
<li><input disabled type="checkbox"> C++ 虚函数</li>
<li><input disabled type="checkbox"> </li>
</ul>
<ul>
<li>Others</li>
</ul>
<ul>
<li><input disabled type="checkbox"> Emm…</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Convert Python Dictionary to Source Code of Latex and Markdown</title>
    <url>/2023/03/30/dict-to-latex-md/</url>
    <content><![CDATA[<p>The code is generated by [ChatGPT].</p>
<p>Here are two common functions, that can convert the python built-in dictionary into the format of latex&#x2F;markdown unnumbered list, so that we can copy it into the latex&#x2F;markdown. Example can be:</p>
<p>The input python dictionary is:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;</span><br><span class="line">    <span class="string">&quot;fruits&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;apples&quot;</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bananas&quot;</span>: <span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">        <span class="string">&quot;grapes&quot;</span>: <span class="string">&quot;purple&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;vegetables&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;carrots&quot;</span>: <span class="string">&quot;orange&quot;</span>,</span><br><span class="line">        <span class="string">&quot;spinach&quot;</span>: <span class="string">&quot;green&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;meat&quot;</span>: <span class="string">&quot;beef&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dairy&quot;</span>: <span class="string">&quot;milk&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The result for markdown is:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> fruits</span><br><span class="line"><span class="bullet">  -</span> apples</span><br><span class="line"><span class="bullet">  -</span> bananas</span><br><span class="line"><span class="bullet">  -</span> grapes</span><br><span class="line"><span class="bullet">-</span> vegetables</span><br><span class="line"><span class="bullet">  -</span> carrots</span><br><span class="line"><span class="bullet">  -</span> spinach</span><br><span class="line"><span class="bullet">-</span> meat</span><br><span class="line"><span class="bullet">  -</span> beef</span><br><span class="line"><span class="bullet">-</span> dairy</span><br><span class="line"><span class="bullet">  -</span> milk</span><br></pre></td></tr></table></figure>

<p>and result for LaTeX is:</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\item</span> fruits</span><br><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line">  <span class="keyword">\item</span> apples: red</span><br><span class="line">  <span class="keyword">\item</span> bananas: yellow</span><br><span class="line">  <span class="keyword">\item</span> grapes: purple</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span> vegetables</span><br><span class="line"><span class="keyword">\begin</span>&#123;itemize&#125;</span><br><span class="line">  <span class="keyword">\item</span> carrots: orange</span><br><span class="line">  <span class="keyword">\item</span> spinach: green</span><br><span class="line"><span class="keyword">\end</span>&#123;itemize&#125;</span><br><span class="line"><span class="keyword">\item</span> meat: beef</span><br><span class="line"><span class="keyword">\item</span> dairy: milk</span><br></pre></td></tr></table></figure>



<p>Function explanation: it is as simple as it shows. We use the recursion strategy here. When we are going to print a sub-dictionary, we recursively call the function, with more (two) spaces indented.</p>
<h2 id="Dict-to-latex-unnumbered-list"><a href="#Dict-to-latex-unnumbered-list" class="headerlink" title="Dict to latex unnumbered list"></a>Dict to latex unnumbered list</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dict_to_latex</span>(<span class="params">d, level=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Converts a dictionary to a string in LaTeX format for an unnumbered list.</span></span><br><span class="line"><span class="string">    Nested dictionaries are considered as second level items.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">    - d (dict): The dictionary to be converted.</span></span><br><span class="line"><span class="string">    - level (int): The current nesting level (defaults to 0).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    - A string in LaTeX format for an unnumbered list.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    latex_str = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(k, <span class="built_in">str</span>):</span><br><span class="line">            k = k.replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;\_&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">str</span>):</span><br><span class="line">            v = v.replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;\_&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">dict</span>):</span><br><span class="line">            latex_str += <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;  &#x27;</span>*level&#125;</span>\\item <span class="subst">&#123;k&#125;</span>\n\\begin&#123;&#123;itemize&#125;&#125;\n<span class="subst">&#123;dict_to_latex(v, level+<span class="number">1</span>)&#125;</span>\\end&#123;&#123;itemize&#125;&#125;\n&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            latex_str += <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;  &#x27;</span>*level&#125;</span>\\item <span class="subst">&#123;k&#125;</span>: <span class="subst">&#123;v&#125;</span>\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> latex_str</span><br></pre></td></tr></table></figure>

<p>Note that we should avoid the <code>_</code> in our string. So we need first convert it into escape character, <code>\_</code>.</p>
<p>The result of the string should be wrapped by a <code>\begin&#123;itemize&#125; \end&#123;itemize&#125;</code>.</p>
<h2 id="Dict-to-markdown-unnumbered-list"><a href="#Dict-to-markdown-unnumbered-list" class="headerlink" title="Dict to markdown unnumbered list"></a>Dict to markdown unnumbered list</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dict_to_markdown</span>(<span class="params">d, level=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Converts a dictionary to a string in Markdown format for an unnumbered list.</span></span><br><span class="line"><span class="string">    Nested dictionaries are considered as second level items.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">    - d (dict): The dictionary to be converted.</span></span><br><span class="line"><span class="string">    - level (int): The current nesting level (defaults to 0).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    - A string in Markdown format for an unnumbered list.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    md_str = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">dict</span>):</span><br><span class="line">            md_str += <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;  &#x27;</span>*level&#125;</span>- <span class="subst">&#123;k&#125;</span>\n<span class="subst">&#123;dict_to_markdown(v, level+<span class="number">1</span>)&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            md_str += <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;  &#x27;</span>*level&#125;</span>- <span class="subst">&#123;k&#125;</span>: <span class="subst">&#123;v&#125;</span>\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> md_str</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Techniques</category>
      </categories>
  </entry>
  <entry>
    <title>pytorch collate_fn and zip function</title>
    <url>/2023/03/30/collate-fn-and-zip/</url>
    <content><![CDATA[<p>Part of the article is generated by [ChatGPT]</p>
<h2 id="collate-fn"><a href="#collate-fn" class="headerlink" title="collate_fn"></a>collate_fn</h2><p>This post records about the <code>collate_fn</code> from <code>torch.util.data.DataLoader</code> and the python built-in function <code>zip</code>. </p>
<p>Each batch, the dataloader collects <code>batch_size</code> number of items. They are picked from the dataset one by one. So currently, the batch data is <code>[(data1, target1), (data2, target2), ..., (dataN, targetN)]</code>. </p>
<p>The default <code>collate_fn</code> would change it into <code>[torch.tensor([data1, data2, ..., dataN]), torch.tensor([target1, target2, ..., targetN])]</code>. </p>
<p>However, in some NLP tasks, the data is not in the same length. So we need to apply <code>torch.nn.utils.rnn.pad_sequence</code> to make each data same length (usually the maximum length in this batch). A typical implementation is:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">collate_fn_train</span>(<span class="params">batch</span>):</span><br><span class="line">    x, y = <span class="built_in">zip</span>(*batch)</span><br><span class="line">    x_pad = pad_sequence(x, batch_first=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># y = torch.Tensor(y) # optional</span></span><br><span class="line">    <span class="keyword">return</span> x_pad, y</span><br></pre></td></tr></table></figure>



<h2 id="zip-and"><a href="#zip-and" class="headerlink" title="zip and *"></a>zip and *</h2><ul>
<li>What does the <code>zip</code> do in the above function?</li>
</ul>
<p>The <code>zip()</code> function in Python is a built-in function that takes one or more iterables (such as lists, tuples, or strings) and “zips” them together, returning an iterator of tuples where the i-th tuple contains the i-th element from each of the input iterables.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">c = [<span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line">zipped = <span class="built_in">zip</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(zipped))</span><br><span class="line"><span class="comment"># OUTPUT</span></span><br><span class="line">[(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="literal">True</span>), (<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="literal">False</span>), (<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>, <span class="literal">True</span>)]</span><br></pre></td></tr></table></figure>

<ul>
<li>What is the <code>*</code>?</li>
</ul>
<p>In Python, the asterisk (*) symbol can be used to unpack iterables like lists or tuples. When used in this way, the asterisk is sometimes called the “splat” operator or the “unpacking” operator. The unpacking operator is used to extract the individual elements from an iterable and assign them to separate variables.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(*my_list)</span><br><span class="line"><span class="comment"># equals</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># OUTPUT</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>So, what is the <code>x, y = zip(*batch)</code>?</li>
</ul>
<p>First, <code>batch</code> is <code>[(data1, target1), (data2, target2), ..., (dataN, targetN)]</code>.</p>
<p><code>*batch</code> would unpack the outmost list, to be <code>zip((data1, target1), (data2, target2), ..., (dataN, targetN))</code>. The result would be two tuples, <code>[data1, data2, ..., dataN]</code> and <code>[target1, target2, ..., targetN]</code>. The former one is assigned to <code>x</code> and the other is assigned to <code>y</code>.</p>
<p>In this way, we get separate data structure, that contains all <code>data</code> and <code>target</code> respectively.  </p>
]]></content>
      <categories>
        <category>Techniques</category>
      </categories>
  </entry>
  <entry>
    <title>signal system with python</title>
    <url>/2023/04/04/signal-system-with-python/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Pytorch C packages CUDA Installation Mismatch Problems</title>
    <url>/2023/04/27/pytorch-C-packages-installation-failed-problems/</url>
    <content><![CDATA[<p>When installing some non-pip installed packages, especially in the deep learning field, we may use <code>python setup.py build install</code> to build the packages locally. Then, some typical problems may happen in this stage. An CUDA mismatch error may be:</p>
<p><img src="/2023/04/27/pytorch-C-packages-installation-failed-problems/problem.png" alt="problem"></p>
<p>This error can be caused for many reasons. I just report my situation and how do I solve it. </p>
<h2 id="Why-this-happen"><a href="#Why-this-happen" class="headerlink" title="Why this happen?"></a>Why this happen?</h2><p>Some packages need to be compiled by the local CUDA compilers and to be installed locally. Then, those packages cooperate with the pytorch in the conda environment. Therefore, they need to be a compiled with the same version (at least same major version, like <code>cuda 11.x</code>) CUDA compilers. </p>
<ul>
<li>First, we inspect the conda environment’s pytorch’s CUDA version by:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> torch</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.version.cuda</span><br><span class="line"><span class="string">&#x27;11.3&#x27;</span></span><br></pre></td></tr></table></figure>

<p>This means that our pytorch is compiled by cuda <code>11.3</code>. (Same as the error message above!)</p>
<ul>
<li>Then, we inspect the system’s CUDA compiler version by:</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvcc -V</span><br><span class="line"><span class="comment"># OUTPUT</span></span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2019 NVIDIA Corporation</span><br><span class="line">Built on Wed_Oct_23_19:24:38_PDT_2019</span><br><span class="line">Cuda compilation tools, release 10.2, V10.2.89</span><br></pre></td></tr></table></figure>

<p>This means that our system’s current CUDA version is <code>10.2</code>. (Same as the error message above!)</p>
<p>Therefore, the compiler version going to compile the package is NOT consistent with the compiler compiled pytorch. The Error is reported.</p>
<h2 id="How-to-solve-it"><a href="#How-to-solve-it" class="headerlink" title="How to solve it?"></a>How to solve it?</h2><p>So to solve this problem, the easiest way is to install a new CUDA with corresponding version. (In my test, I don’t need to install an exact <code>11.3</code> version, only an <code>11.1</code> version is OK)</p>
<ol>
<li>Install the CUDA with specific version. Many installation tutorials can be found online (skipped)</li>
<li>Export the new path in <code>~/.bashrc</code>: Add following command at the end of <code>~/.bashrc</code>:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda-&lt;YOUR VERSION&gt;/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-&lt;YOUR VERSION&gt;/lib64:<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span></span><br></pre></td></tr></table></figure>

<p>(Remember to change &lt;YOUR VERSION&gt; above to your CUDA version!!)</p>
<ol start="3">
<li>Open a new terminal, type in:</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvcc -V</span><br><span class="line"><span class="comment"># OUTPUT</span></span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2020 NVIDIA Corporation</span><br><span class="line">Built on Mon_Oct_12_20:09:46_PDT_2020</span><br><span class="line">Cuda compilation tools, release 11.1, V11.1.105</span><br><span class="line">Build cuda_11.1.TC455_06.29190527_0</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Then it should work! Go to the installation directory, and then switch to the target conda environment, and install!</li>
</ol>
<h2 id="Common-techniques-for-debugging"><a href="#Common-techniques-for-debugging" class="headerlink" title="Common techniques for debugging"></a>Common techniques for debugging</h2><ul>
<li>Inspecting the pytorch’s CUDA version:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> torch</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.version.cuda</span><br><span class="line"><span class="string">&#x27;11.3&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Inspecting the system’s CUDA compiler version:</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> torch.utils.cpp_extension <span class="keyword">import</span> CUDA_HOME</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>CUDA_HOME</span><br><span class="line"><span class="string">&#x27;/usr/local/cuda-11.1&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Change the <code>$PATH</code> variable, so the new CUDA can be found:</li>
</ul>
<p>Add following command at the end of <code>~/.bashrc</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda-11.1/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-11.1/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>

<p>REMEMBER to change the CUDA version to your version.</p>
<ul>
<li>Delete the cached installing data</li>
</ul>
<p>In some situation, when we modified the compiler, we shall build the package from scratch. </p>
<p><strong>Remove</strong> any of the build, cached, dist, temp directory! E.g., the <code>build</code> and <code>DCNv3.egg-info</code> and <code>dist</code> directory below.</p>
<img src="/2023/04/27/pytorch-C-packages-installation-failed-problems/package.png" alt="package" style="zoom:60%;"> 

<p>(But be careful that don’t remove the source code!!!)</p>
]]></content>
      <tags>
        <tag>Techniques</tag>
      </tags>
  </entry>
  <entry>
    <title>Common LaTeX Blocks Templates</title>
    <url>/2023/05/02/common-latex-templates/</url>
    <content><![CDATA[<h2 id="Set-geometries"><a href="#Set-geometries" class="headerlink" title="Set geometries"></a>Set geometries</h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;geometry&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\geometry</span>&#123;a4paper, top = 1.25in, bottom = 1.25in, left = 1.25in, right = 1.25in, headheight = 1.25in&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Figures"><a href="#Figures" class="headerlink" title="Figures"></a>Figures</h2><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;float&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;subcaption&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125; </span><br></pre></td></tr></table></figure>

<img src="/2023/05/02/common-latex-templates/figures.png" alt="figures" style="zoom:60%;">

<h3 id="Single-Figure"><a href="#Single-Figure" class="headerlink" title="Single Figure:"></a>Single Figure:</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[H]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=0.35<span class="keyword">\textwidth</span>]&#123;blankfig.png&#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;XXXXXX&#125;</span><br><span class="line">    <span class="comment">% \label&#123;XXXX&#125;</span></span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Subfigures"><a href="#Subfigures" class="headerlink" title="Subfigures:"></a>Subfigures:</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[H]</span><br><span class="line">     <span class="keyword">\centering</span></span><br><span class="line">     <span class="keyword">\begin</span>&#123;subfigure&#125;[b]&#123;0.47<span class="keyword">\textwidth</span>&#125;</span><br><span class="line">         <span class="keyword">\centering</span></span><br><span class="line">         <span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]&#123;blankfig.png&#125;</span><br><span class="line">         <span class="keyword">\caption</span>&#123;xxxx&#125;</span><br><span class="line">         <span class="comment">% \label&#123;xxxx&#125;</span></span><br><span class="line">     <span class="keyword">\end</span>&#123;subfigure&#125;</span><br><span class="line">     <span class="comment">% \hfill</span></span><br><span class="line">     <span class="keyword">\begin</span>&#123;subfigure&#125;[b]&#123;0.47<span class="keyword">\textwidth</span>&#125;</span><br><span class="line">         <span class="keyword">\centering</span></span><br><span class="line">         <span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]&#123;blankfig.png&#125;</span><br><span class="line">         <span class="keyword">\caption</span>&#123;xxxx&#125;</span><br><span class="line">         <span class="comment">% \label&#123;xxxx&#125;</span></span><br><span class="line">     <span class="keyword">\end</span>&#123;subfigure&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">\caption</span>&#123;XXXX&#125;</span><br><span class="line">    <span class="comment">% \label&#123;xxxx&#125;</span></span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Parallel-Figures"><a href="#Parallel-Figures" class="headerlink" title="Parallel Figures"></a>Parallel Figures</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[H]<span class="comment">%[htp]</span></span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\begin</span>&#123;minipage&#125;[t]&#123;0.47<span class="keyword">\textwidth</span>&#125;</span><br><span class="line">        <span class="keyword">\centering</span></span><br><span class="line">        <span class="keyword">\includegraphics</span>[width=1<span class="keyword">\textwidth</span>]&#123;blankfig.png&#125;</span><br><span class="line">        <span class="keyword">\caption</span>&#123;XXXX&#125;</span><br><span class="line">    <span class="comment">% \label&#123;XXXX&#125;</span></span><br><span class="line">    <span class="keyword">\end</span>&#123;minipage&#125;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;minipage&#125;[t]&#123;0.47<span class="keyword">\textwidth</span>&#125;</span><br><span class="line">        <span class="keyword">\centering</span></span><br><span class="line">        <span class="keyword">\includegraphics</span>[width=1<span class="keyword">\textwidth</span>]&#123;blankfig.png&#125;</span><br><span class="line">        <span class="keyword">\caption</span>&#123;XXXX&#125;</span><br><span class="line">        <span class="comment">% \label&#123;XXXX&#125;</span></span><br><span class="line">    <span class="keyword">\end</span>&#123;minipage&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Pseudo-codes"><a href="#Pseudo-codes" class="headerlink" title="Pseudo-codes"></a>Pseudo-codes</h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[ruled, vlined, linesnumbered]&#123;algorithm2e&#125;</span><br></pre></td></tr></table></figure>

<img src="/2023/05/02/common-latex-templates/pseudo-codes.png" alt="pseudo-codes" style="zoom:60%;">

<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;algorithm&#125;[H]</span><br><span class="line">	<span class="keyword">\caption</span>&#123;Residual&#x27;s Distribution Simulation&#125;</span><br><span class="line">	<span class="keyword">\BlankLine</span></span><br><span class="line">    <span class="keyword">\SetAlgoLined</span></span><br><span class="line">	<span class="keyword">\KwIn</span>&#123;Number of sample needed (<span class="built_in">$</span>num<span class="built_in">_</span>&#123;sample&#125;<span class="built_in">$</span>), <span class="built_in">$</span>w<span class="built_in">_</span>1<span class="built_in">$</span>,<span class="built_in">$</span>w<span class="built_in">_</span>2<span class="built_in">$</span>,<span class="built_in">$</span>w<span class="built_in">_</span>3<span class="built_in">$</span>,<span class="built_in">$</span><span class="keyword">\mu</span><span class="built_in">_</span>1<span class="built_in">$</span>,<span class="built_in">$</span><span class="keyword">\mu</span><span class="built_in">_</span>2<span class="built_in">$</span>,<span class="built_in">$</span><span class="keyword">\mu</span><span class="built_in">_</span>3<span class="built_in">$</span>,<span class="built_in">$</span><span class="keyword">\sigma</span><span class="built_in">_</span>1<span class="built_in">$</span>,<span class="built_in">$</span><span class="keyword">\sigma</span><span class="built_in">_</span>2<span class="built_in">$</span>,<span class="built_in">$</span><span class="keyword">\sigma</span><span class="built_in">_</span>3<span class="built_in">$</span>.&#125;</span><br><span class="line">	<span class="keyword">\KwOut</span>&#123;A sequence of random variables <span class="built_in">$</span><span class="keyword">\&#123;</span>X<span class="built_in">_</span>i<span class="keyword">\&#125;</span><span class="built_in">_</span>&#123;i = 1&#125;<span class="built_in">^</span>&#123;num<span class="built_in">_</span>&#123;sample&#125;&#125;<span class="built_in">$</span> following target distribution.&#125; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">\BlankLine</span></span><br><span class="line">    i = 0<span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\While</span>&#123;<span class="built_in">$</span> i &lt; num<span class="built_in">_</span>&#123;sample&#125; <span class="built_in">$</span>&#125;&#123;</span><br><span class="line">        <span class="built_in">$</span>v<span class="built_in">_</span>i<span class="built_in">$</span> <span class="built_in">$</span><span class="keyword">\sim</span> <span class="keyword">\mathcal</span>&#123;U&#125;[0,1]<span class="built_in">$</span><span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\uIf</span>&#123;<span class="built_in">$</span>0&lt;v<span class="built_in">_</span>i <span class="keyword">\leq</span> w<span class="built_in">_</span>1<span class="built_in">$</span>&#125;&#123;</span><br><span class="line">            <span class="built_in">$</span>X<span class="built_in">_</span>i <span class="keyword">\sim</span> <span class="keyword">\mathcal</span>&#123;N&#125;(<span class="keyword">\mu</span><span class="built_in">_</span>1,<span class="keyword">\sigma</span><span class="built_in">_</span>1<span class="built_in">^</span>2)<span class="built_in">$</span> <span class="keyword">\;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">\uElseIf</span>&#123;<span class="built_in">$</span>w<span class="built_in">_</span>1&lt;v<span class="built_in">_</span>i<span class="keyword">\leq</span> w<span class="built_in">_</span>2<span class="built_in">$</span>&#125;&#123;</span><br><span class="line">            <span class="built_in">$</span>X<span class="built_in">_</span>i <span class="keyword">\sim</span> <span class="keyword">\mathcal</span>&#123;N&#125;(<span class="keyword">\mu</span><span class="built_in">_</span>2,<span class="keyword">\sigma</span><span class="built_in">_</span>2<span class="built_in">^</span>2)<span class="built_in">$</span> <span class="keyword">\;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">\Else</span>&#123;</span><br><span class="line">            <span class="built_in">$</span>X<span class="built_in">_</span>i <span class="keyword">\sim</span> <span class="keyword">\mathcal</span>&#123;N&#125;(<span class="keyword">\mu</span><span class="built_in">_</span>3,<span class="keyword">\sigma</span><span class="built_in">_</span>3<span class="built_in">^</span>2)<span class="built_in">$</span> <span class="keyword">\;</span></span><br><span class="line">        &#125;</span><br><span class="line">        i = i + 1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">\Return</span>&#123;<span class="built_in">$</span><span class="keyword">\&#123;</span>X<span class="built_in">_</span>i<span class="keyword">\&#125;</span><span class="built_in">_</span>&#123;i = 1&#125;<span class="built_in">^</span>&#123;num<span class="built_in">_</span>&#123;sample&#125;&#125;<span class="built_in">$</span>    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">\BlankLine</span></span><br><span class="line"><span class="keyword">\end</span>&#123;algorithm&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;tabularx&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;booktabs&#125;</span><br></pre></td></tr></table></figure>

<img src="/2023/05/02/common-latex-templates/tables.png" alt="tables" style="zoom:60%;">

<h3 id="Narrow-table"><a href="#Narrow-table" class="headerlink" title="Narrow table"></a>Narrow table</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[H]</span><br><span class="line">    <span class="keyword">\centering</span><span class="keyword">\small</span></span><br><span class="line">    <span class="keyword">\setlength</span>&#123;<span class="keyword">\tabcolsep</span>&#125;&#123;3mm&#125;&#123;</span><br><span class="line">        <span class="keyword">\caption</span>&#123;XXXX&#125;</span><br><span class="line">        <span class="keyword">\begin</span>&#123;tabular&#125;&#123;cccc&#125;</span><br><span class="line">            <span class="keyword">\specialrule</span>&#123;0.05em&#125;&#123;3pt&#125;&#123;3pt&#125;</span><br><span class="line">            <span class="keyword">\toprule</span></span><br><span class="line">            X <span class="built_in">&amp;</span> X <span class="built_in">&amp;</span> X <span class="built_in">&amp;</span> X  <span class="keyword">\\</span></span><br><span class="line">            <span class="keyword">\midrule</span></span><br><span class="line">            XXX <span class="built_in">&amp;</span> 0.928 <span class="built_in">&amp;</span> 0.2935 <span class="built_in">&amp;</span> 1.000 <span class="keyword">\\</span></span><br><span class="line">            XXX <span class="built_in">&amp;</span> 0.747 <span class="built_in">&amp;</span> 0.0526 <span class="built_in">&amp;</span> 1.301 <span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">\specialrule</span>&#123;0.05em&#125;&#123;3pt&#125;&#123;3pt&#125; </span><br><span class="line">        <span class="keyword">\bottomrule</span></span><br><span class="line">        <span class="keyword">\label</span>&#123;tab:compare2&#125;</span><br><span class="line">    	<span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Text-width-table"><a href="#Text-width-table" class="headerlink" title="Text-width table"></a>Text-width table</h3><p>The width may be adjusted manually.</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[H]</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\caption</span>&#123;Experiment results for different &quot;joins&quot;&#125;</span><br><span class="line">    <span class="keyword">\label</span>&#123;X&#125;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tabularx&#125;&#123;<span class="keyword">\textwidth</span>&#125;&#123;X X X&#125;</span><br><span class="line">    <span class="keyword">\toprule</span></span><br><span class="line">    Header 1 <span class="built_in">&amp;</span> Header 2 <span class="built_in">&amp;</span> Header 3 <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\midrule</span></span><br><span class="line">    Data 1   <span class="built_in">&amp;</span> Data 2   <span class="built_in">&amp;</span> Data 3   <span class="keyword">\\</span></span><br><span class="line">    Data 4   <span class="built_in">&amp;</span> Data 5   <span class="built_in">&amp;</span> Data 6   <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\bottomrule</span></span><br><span class="line">    <span class="keyword">\end</span>&#123;tabularx&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Listing"><a href="#Listing" class="headerlink" title="Listing"></a>Listing</h2><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;listings&#125;</span><br></pre></td></tr></table></figure>

<img src="/2023/05/02/common-latex-templates/listings.png" alt="listings" style="zoom:60%;">

<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% outside of document</span></span><br><span class="line"><span class="keyword">\lstset</span>&#123;</span><br><span class="line">    language=SQL,    </span><br><span class="line">    basicstyle = <span class="keyword">\tiny</span><span class="keyword">\ttfamily</span>,</span><br><span class="line">    breaklines=true,</span><br><span class="line">    numberstyle=<span class="keyword">\tiny</span>,keywordstyle=<span class="keyword">\color</span>&#123;blue!70&#125;,</span><br><span class="line">    commentstyle=<span class="keyword">\color</span>&#123;red!50!green!50!blue!50&#125;,frame=shadowbox,</span><br><span class="line">    columns=flexible,</span><br><span class="line">    rulesepcolor=<span class="keyword">\color</span>&#123;red!20!green!20!blue!20&#125;,basicstyle=<span class="keyword">\ttfamily</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">% inside of document</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;lstlisting&#125;</span><br><span class="line">    SELECT u.province, c.chip<span class="built_in">_</span>name AS ChipName, SUM(p.budget) AS revenue</span><br><span class="line">    FROM user AS u NATURAL JOIN package AS p, chip AS c</span><br><span class="line">    WHERE p.package<span class="built_in">_</span>id=c.package<span class="built_in">_</span>id AND province IN (<span class="comment">%s)</span></span><br><span class="line">    GROUP BY c.chip<span class="built_in">_</span>name</span><br><span class="line">    ORDER BY SUM(p.budget) DESC; </span><br><span class="line"><span class="keyword">\end</span>&#123;lstlisting&#125;</span><br></pre></td></tr></table></figure>

<img src="/2023/05/02/common-latex-templates/listing2.png" alt="listing2" style="zoom:60%;">

<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% outside of document</span></span><br><span class="line"><span class="keyword">\lstset</span>&#123;</span><br><span class="line">  language=Python,</span><br><span class="line">  basicstyle=<span class="keyword">\small</span><span class="keyword">\ttfamily</span>,</span><br><span class="line">  commentstyle=<span class="keyword">\color</span>&#123;gray&#125;,</span><br><span class="line">  keywordstyle=<span class="keyword">\color</span>&#123;blue&#125;<span class="keyword">\bfseries</span>,</span><br><span class="line">  stringstyle=<span class="keyword">\color</span>&#123;red&#125;,</span><br><span class="line">  showstringspaces=false,</span><br><span class="line">  numbers=left,</span><br><span class="line">  numberstyle=<span class="keyword">\tiny</span><span class="keyword">\color</span>&#123;gray&#125;,</span><br><span class="line">  stepnumber=1,</span><br><span class="line">  numbersep=10pt,</span><br><span class="line">  tabsize=4,</span><br><span class="line">  showspaces=false,</span><br><span class="line">  showtabs=false,</span><br><span class="line">  breaklines=true,</span><br><span class="line">  breakatwhitespace=true,</span><br><span class="line">  aboveskip=<span class="keyword">\bigskipamount</span>,</span><br><span class="line">  belowskip=<span class="keyword">\bigskipamount</span>,</span><br><span class="line">  frame=single</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">% inside of document</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;lstlisting&#125;</span><br><span class="line">    print(&quot;hello world!&quot;)</span><br><span class="line">    for qid in range(hs.shape[0]):</span><br><span class="line">    if qid &lt; 1:</span><br><span class="line">        lvl = 0</span><br><span class="line">    elif qid &gt;= 1 and qid &lt; 3:</span><br><span class="line">        lvl = 1</span><br><span class="line">    elif qid &gt;= 3 and qid &lt; 6:</span><br><span class="line">        lvl = 2</span><br><span class="line">    elif qid &gt;= 6 and qid &lt; 11:</span><br><span class="line">        lvl = 3</span><br><span class="line"><span class="keyword">\end</span>&#123;lstlisting&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <tags>
        <tag>Techniques</tag>
      </tags>
  </entry>
</search>
